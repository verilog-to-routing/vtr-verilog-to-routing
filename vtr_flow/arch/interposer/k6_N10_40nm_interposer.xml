<!-- 
  Architecture with no fracturable LUTs

  - 40 nm technology
  - General purpose logic block: 
    K = 6, N = 10
  - Routing architecture: L = 4, fc_in = 0.15, fc_out = 0.15
  - Unidirectional (mux-based) routing


  Details on Modelling:

  Based on flagship k6_frac_N10_mem32K_40nm.xml architecture.  This architecture has no fracturable LUTs nor any heterogeneous blocks.
  The delays and areas are based on a mix of values from commercial 40 nm
  FPGAs with a comparable architecture and 40 nm interconnect and 
  transistor models.

  Authors: Jason Luu, Jeff Goeders, Vaughn Betz
-->
<architecture>
  <!-- 
       ODIN II specific config begins 
       This part of the architecture file describes the "primitives" 
       that exist in a device to the synthesis tool used to "elaborate" 
       verilog into these primitives (which is called ODIN-II).
       Basic LUTs, I/Os and FFs are built into the language used by this 
       flow (blif keywords .names, .input, .output and .latch), so they 
       don't have to be described here.
    
       For this lab you are also given the benchmark netlists after 
       synthesis is complete (in the blif directory), so you don't need 
       to run ODIN II.
  -->
  <models>
  </models>
  <!-- ODIN II specific config ends -->

  <!-- Descritions of the physical tiles that exist on the die begins -->
  <tiles>
    <tile name="io" area="0">
      <sub_tile name="io" capacity="8">
        <equivalent_sites>
          <site pb_type="io" pin_mapping="direct"/>
        </equivalent_sites>
        <input name="outpad" num_pins="1"/>
        <output name="inpad" num_pins="1"/>
        <clock name="clock" num_pins="1"/>
        <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.15"/>
      <!-- IOs go on the periphery of the FPGA in this 
           architecture. Since I don't want to define four 
           different physical I/Os for the left, right, top, 
           and bottom sides just say each pin of the I/O 
           block is accessible from all four sides so we can
           reach routing channels on some side of the block
           no matter which side of the chip we're on.
        -->
        <pinlocations pattern="custom">
          <loc side="left">io.outpad io.inpad io.clock</loc>
          <loc side="top">io.outpad io.inpad io.clock</loc>
          <loc side="right">io.outpad io.inpad io.clock</loc>
          <loc side="bottom">io.outpad io.inpad io.clock</loc>
        </pinlocations>
      </sub_tile>
    </tile>

    <!-- Define general purpose logic block (CLB) begin -->
          <!-- Area below is for everything inside the
                logic block (LUTs, FFs, intra-cluster 
                routing). It's a bit on the low side given the large crossbars in this
                architecture - more appropriate for a lower-cost
                FPGA with smaller transistors and narrower metal.
                -->
    <tile name="clb" area="18000">
      <!-- We can place a clustered block of type clb on a tile location 
           of type clb.
           -->
      <sub_tile name="clb">
        <equivalent_sites>
          <site pb_type="clb" pin_mapping="direct"/>
        </equivalent_sites>

      <!-- We have a full crossbar between the cluster inputs and the 
           LUT inputs, so the router can route to *any* input or from
           *any* output on the logic block.  Hence mark the logic block
           inputs as fully logically equivalent (swappable by the router) and also the
           logic block outputs as logically equivalent, which means
           they can also be swapped by the router.
           -->

        <input name="I" num_pins="40" equivalent="full"/>
        <output name="O" num_pins="10" equivalent="instance"/>
        <clock name="clk" num_pins="1"/>
        <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.15"/>
        <pinlocations pattern="spread"/>
      </sub_tile>
    </tile>
  </tiles>
  <!-- Physical tile descriptions end -->
  
  <!-- Chip layout (in terms of where tiles are) begins -->
  <layout>
    <auto_layout aspect_ratio="1.0">
      <!--Perimeter of 'io' blocks with 'EMPTY' blocks at corners-->
      <perimeter type="io" priority="100"/>
      <corners type="EMPTY" priority="101"/>
      <!--Fill with 'clb'-->
      <fill type="clb" priority="10"/>
    </auto_layout>

    <fixed_layout name="vtr_homogeneous_extra_small" width="10" height="10">
      <!--Perimeter of 'io' blocks with 'EMPTY' blocks at corners-->
      <perimeter type="io" priority="100"/>
      <corners type="EMPTY" priority="101"/>
      <!--Fill with 'clb'-->
      <fill type="clb" priority="10"/>

      <interposer_cut dim="x" loc="5">
        <interdie_wire sg_name="interposer_sg" sg_link="L_UP" offset_start="0" offset_end="0" offset_increment="0" num="30"/>
        <interdie_wire sg_name="interposer_sg" sg_link="L_DOWN" offset_start="0" offset_end="0" offset_increment="0" num="30"/>
      </interposer_cut>
    </fixed_layout>
  </layout>
  <!-- Chip layout ends -->

  <!-- Electrical and inter-cluster (general) routing description begins -->
  <device>
    <!-- Some area and timing parameters -->
    <sizing R_minW_nmos="8926" R_minW_pmos="16067"/>
    <!-- The grid_logic_tile_area below will be used for all blocks that do not explicitly set their own (non-routing)
     	  area; set to 0 since we explicitly set the area of all blocks currently in this architecture file.
	  -->
    <area grid_logic_tile_area="0"/>
    <chan_width_distr>
      <x distr="uniform" peak="1.000000"/>
      <y distr="uniform" peak="1.000000"/>
    </chan_width_distr>

    <!-- Define the switch block pattern (pattern of switches between inter-tile routing wires)
         The Wilton switch block is a sample pattern; you can use custom switch blocks for more control -->
    <switch_block type="wilton" fs="3"/>

    <!-- Set which switch to use for input connection blocks. Only affects timing and area, not connectivity -->
    <connection_block input_switch_name="ipin_cblock"/>
  </device>
  <switchlist>
    <!-- VB: the mux_trans_size and buf_size data below is in minimum width transistor *areas*, assuming the purple
	       book area formula. This means the mux transistors are about 5x minimum drive strength.
	       We assume the first stage of the buffer is 3x min drive strength to be reasonable given the large 
	       mux transistors, and this gives a reasonable stage ratio of a bit over 5x to the second stage. 
	       -->
    <switch type="mux" name="0" R="551" Cin=".77e-15" Cout="4e-15" Tdel="58e-12" mux_trans_size="2.630740" buf_size="27.645901"/>
    <!--switch ipin_cblock resistance set to yeild for 4x minimum drive strength buffer-->
    <switch type="mux" name="ipin_cblock" R="2231.5" Cout="0." Cin="1.47e-15" Tdel="7.247000e-11" mux_trans_size="1.222260" buf_size="auto"/>
  </switchlist>
  <segmentlist>
    <!--- VB & JL: using ITRS metal stack data, 96 nm half pitch wires, which are intermediate metal width/space.  
          Wires of this pitch will fit over a 90 nm
          high logic tile (which is about the height of a Stratix IV logic tile).
          I'm using a tile length of 90 nm, corresponding to the length of a Stratix IV tile if it were square. 
          length below is in units of logic blocks, and Rmetal and Cmetal are
          per logic block passed, so wire delay adapts automatically if you change the
          length=? value.   -->

    <!-- Currently only one type of routing wire, which
         is of length 4 and has switches to every connection
         box (4 of them) and switch box (5 of them) 
         it passes. You can change wirelengths just by changing the length="?" values
         and changing the number of 1's (or 0's) in the <sb type and <cb type lines to
         match the number of switch blocks and connection blocks a wire of that length
         would span. -->
    <segment freq="1.000000" length="4" type="unidir" Rmetal="101" Cmetal="22.5e-15">
      <mux name="0"/>
      <sb type="pattern">1 1 1 1 1</sb>
      <cb type="pattern">1 1 1 1</cb>
    </segment>
  </segmentlist>
  <!-- Electrical and inter-cluster routing description ends -->

  <!-- Description of the capabilities (number of BLEs, modes) and local interconnect in
       each type of complex (clustered) block (e.g. LBs) begins
    -->
  <complexblocklist>
    <!-- Define I/O pads begin -->
    <!-- Not sure of the area of an I/O (varies widely), and it's not relevant to the design of the FPGA core, so we're setting it to 0. -->
    <pb_type name="io">
      <input name="outpad" num_pins="1"/>
      <output name="inpad" num_pins="1"/>
      <clock name="clock" num_pins="1"/>
      <!-- IOs can operate as either inputs or outputs.
	     The delays below are to and from registers in the I/O (and generally I/Os are registered 
	     today).
	     -->
      <mode name="inpad">
        <pb_type name="inpad" blif_model=".input" num_pb="1">
          <output name="inpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="inpad" input="inpad.inpad" output="io.inpad">
            <delay_constant max="4.243e-11" in_port="inpad.inpad" out_port="io.inpad"/>
          </direct>
        </interconnect>
      </mode>
      <mode name="outpad">
        <pb_type name="outpad" blif_model=".output" num_pb="1">
          <input name="outpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="outpad" input="io.outpad" output="outpad.outpad">
            <delay_constant max="1.394e-11" in_port="io.outpad" out_port="outpad.outpad"/>
          </direct>
        </interconnect>
      </mode>

      <!-- Not modeling I/O power for now -->
      <power method="ignore"/>
    </pb_type>
    <!-- Define I/O pads ends -->

    <!-- Define general purpose logic block (CLB) begin -->
          <!-- Area below is for everything inside the
                logic block (LUTs, FFs, intra-cluster 
                routing).  
           -->
    <pb_type name="clb">
      <input name="I" num_pins="40" equivalent="full"/>
      <output name="O" num_pins="10" equivalent="instance"/>
      <clock name="clk" num_pins="1"/>
      <!-- Describe basic logic element.  
             Each basic logic element has a 6-LUT that can be optionally registered
        -->
      <pb_type name="fle" num_pb="10">
        <input name="in" num_pins="6"/>
        <output name="out" num_pins="1"/>
        <clock name="clk" num_pins="1"/>
        <!-- 6-LUT mode definition begin -->
        <mode name="n1_lut6">
          <!-- Define 6-LUT mode -->
          <pb_type name="ble6" num_pb="1">
            <input name="in" num_pins="6"/>
            <output name="out" num_pins="1"/>
            <clock name="clk" num_pins="1"/>
            <!-- Define LUT -->
            <pb_type name="lut6" blif_model=".names" num_pb="1" class="lut">
              <input name="in" num_pins="6" port_class="lut_in"/>
              <output name="out" num_pins="1" port_class="lut_out"/>
              <!-- LUT timing using delay matrix -->
              <!-- These are the delay per LUT input on a Stratix IV LUT.
                   The average is 261 ps, and inputs earlier in the mux tree are slower.
                  -->
              <delay_matrix type="max" in_port="lut6.in" out_port="lut6.out">
                  82e-12
                  173e-12
                  261e-12
                  263e-12
                  398e-12
                  397e-12
              </delay_matrix>
            </pb_type>
            <!-- Define flip-flop -->
            <pb_type name="ff" blif_model=".latch" num_pb="1" class="flipflop">
              <input name="D" num_pins="1" port_class="D"/>
              <output name="Q" num_pins="1" port_class="Q"/>
              <clock name="clk" num_pins="1" port_class="clock"/>
              <T_setup value="66e-12" port="ff.D" clock="clk"/>
              <T_clock_to_Q max="124e-12" port="ff.Q" clock="clk"/>
            </pb_type>

            <!-- many lines below to describe the interconnect
                 wires, muxes and crossbars inside a cluster.
              -->
            <interconnect>
              <direct name="direct1" input="ble6.in" output="lut6[0:0].in"/>
              <direct name="direct2" input="lut6.out" output="ff.D">
                <!-- Advanced user option that tells CAD tool to find LUT+FF pairs in netlist -->
                <pack_pattern name="ble6" in_port="lut6.out" out_port="ff.D"/>
              </direct>
              <direct name="direct3" input="ble6.clk" output="ff.clk"/>
              <mux name="mux1" input="ff.Q lut6.out" output="ble6.out">
                <!-- LUT to output is faster than FF to output on a Stratix IV -->
                <delay_constant max="25e-12" in_port="lut6.out" out_port="ble6.out"/>
                <delay_constant max="45e-12" in_port="ff.Q" out_port="ble6.out"/>
              </mux>
            </interconnect>
          </pb_type>
          <interconnect>
            <direct name="direct1" input="fle.in" output="ble6.in"/>
            <direct name="direct2" input="ble6.out" output="fle.out[0:0]"/>
            <direct name="direct3" input="fle.clk" output="ble6.clk"/>
          </interconnect>
        </mode>
        <!-- 6-LUT mode definition end -->
      </pb_type>
      <interconnect>
        <!-- We use a full crossbar to get logical equivalence at inputs of CLB 
		     The delays below come from Stratix IV. the delay through a connection block
		     input mux + the crossbar in Stratix IV is 167 ps. We already have a 72 ps 
		     delay on the connection block input mux (modeled by Ian Kuon), so the remaining
		     delay within the crossbar is 95 ps. 
		     The delays of cluster feedbacks in Stratix IV is 100 ps, when driven by a LUT.
		     Since all our outputs LUT outputs go to a BLE output, and have a delay of 
		     25 ps to do so, we subtract 25 ps from the 100 ps delay of a feedback
		     to get the part that should be marked on the crossbar.	 -->
        <complete name="crossbar" input="clb.I fle[9:0].out" output="fle[9:0].in">
          <delay_constant max="95e-12" in_port="clb.I" out_port="fle[9:0].in"/>
          <delay_constant max="75e-12" in_port="fle[9:0].out" out_port="fle[9:0].in"/>
        </complete>
        <complete name="clks" input="clb.clk" output="fle[9:0].clk">
        </complete>

        <!-- The BLE outputs are directly connected to the
             CLB (cluster) outputs.  
          -->
        <direct name="clbouts1" input="fle[9:0].out" output="clb.O"/>
      </interconnect>
    </pb_type>
    <!-- Define general purpose logic block (CLB) ends -->
  </complexblocklist>
  <power>
    <local_interconnect C_wire="2.5e-10"/>
    <mux_transistor_size mux_transistor_size="3"/>
    <FF_size FF_size="4"/>
    <LUT_transistor_size LUT_transistor_size="4"/>
  </power>
  <clocks>
    <clock buffer_size="auto" C_wire="2.5e-10"/>
  </clocks>

    <scatter_gather_list>
    <sg_pattern name="interposer_sg" type="unidir">
        <gather>
            <wireconn num_conns="30" from_type="wire" from_switchpoint="1" side="rltb"/>
        </gather>

        <scatter>
            <wireconn num_conns="30" to_type="wire" to_switchpoint="0" side="rtl"/>
        </scatter>
        
        <sg_link_list>
          <sg_link name="L_UP" y_offset="1" mux="sw" seg_type="wire"/>
          <sg_link name="L_DOWN" y_offset="-1" mux="sw" seg_type="wire"/>
        </sg_link_list>
    </sg_pattern>
  </scatter_gather_list>
</architecture>
