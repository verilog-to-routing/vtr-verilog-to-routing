name: Containers

on:
  # We want to run the CI when anything is pushed to master.
  # Since master is a protected branch this only happens when a PR is merged.
  # This is a double check in case the PR was stale and had some issues.
  push:
    branches:
      - master
    paths-ignore: # Prevents from running if only docs are updated
      - 'doc/**'
      - '**/*README*'
      - '**.md'
      - '**.rst'
  pull_request:
    paths-ignore: # Prevents from running if only docs are updated
      - 'doc/**'
      - '**/*README*'
      - '**.md'
      - '**.rst'
  workflow_dispatch:
  schedule:
  - cron: '0 0 * * 0' # weekly

# We want to cancel previous runs for a given PR or branch / ref if another CI
# run is requested.
# See: https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  Image:
    runs-on: ubuntu-latest

    steps:
      - name: üß∞ Repository Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      
      # - name: Log into registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=user/app:buildcache
          cache-to: type=registry,ref=user/app:buildcache,mode=max

      # - name: üîß Generate image name
      #   id: generate
      #   run: |
      #     REPO='${{ github.repository }}'
      #     echo "image=ghcr.io/${REPO,,}/ubuntu/focal/build" >> $GITHUB_OUTPUT

      # - name: ‚õ¥Ô∏è Build container image
      #   run: docker build -t ${{ steps.generate.outputs.image }} -f Dockerfile .

      # - name: üõ∞Ô∏è Push container image
      #   if: github.event_name != 'pull_request'
      #   uses: pyTooling/Actions/with-post-step@r0
      #   with:
      #     main: |
      #       echo '${{ github.token }}' | docker login ghcr.io -u GitHub-Actions --password-stdin
      #       docker push ${{ steps.generate.outputs.image }}
      #     post: docker logout ghcr.io
