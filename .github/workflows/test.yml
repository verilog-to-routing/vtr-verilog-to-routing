name: Test

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
  - cron: '0 0 * * *' # daily

env:
  # default compiler for all non-compatibility tests
  MATRIX_EVAL: "CC=gcc-11 && CXX=g++-11"

jobs:


  Run-tests:
    # Prevents from running on forks where no custom runners are available
    if: ${{ github.repository_owner == 'sdamghan' }}

    container: ubuntu:bionic

    runs-on: [self-hosted, Linux, X64]

    strategy:
      fail-fast: false
      matrix:
        include:
          - {test: "vtr_reg_yosys_odin",    cores: "16", options: "",          cmake: "-DODIN_USE_YOSYS=ON -DYOSYS_SV_UHDM_PLUGIN=ON"}

    env:
      DEBIAN_FRONTEND: "noninteractive"

    steps:

    - uses: actions/checkout@v2

    - name: Setup
      run: stdbuf -i0 -i0 -e0 ./.github/scripts/hostsetup.sh

    - name: Execute test script
      run: stdbuf -i0 -o0 -e0 ./.github/scripts/run-vtr.sh
      env:
        VTR_TEST: ${{ matrix.test }}
        VTR_TEST_OPTIONS: ${{ matrix.options }}
        VTR_CMAKE_PARAMS: ${{ matrix.cmake }}
        NUM_CORES: ${{ matrix.cores }}

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        path: |
          **/results*.gz
          **/plot_*.svg
          **/qor_results*.tar.gz


  Build:
    name: 'B: Building VtR'
    runs-on: ubuntu-18.04
    steps:

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - uses: actions/checkout@v2
    - run: ./.github/scripts/install_dependencies.sh

    - uses: hendrikmuhs/ccache-action@v1

    - name: Test
      env:
        BUILD_TYPE: release
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        ./.github/scripts/build.sh


  Format:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        include:
        - { name: 'C/C++',       script: 'check-format.sh'    }
        - { name: 'Python',      script: 'check-format-py.sh' }
        - { name: 'Python Lint', script: 'pylint_check.py'    }
    name: 'F: ${{ matrix.name }}'
    steps:

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - uses: actions/checkout@v2
    - run: ./.github/scripts/install_dependencies.sh

    - name: Test
      run: ./dev/${{ matrix.script }}


  Warnings:
    name: 'W: Check Compilation Warnings'
    runs-on: ubuntu-18.04
    steps:

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - uses: actions/checkout@v2
    - run: ./.github/scripts/install_dependencies.sh

    - uses: hendrikmuhs/ccache-action@v1

    - name: Test
      env:
        #In order to get compilation warnings produced per source file, we must do a non-IPO build
        #We also turn warnings into errors for this target by doing a strict compile
        CMAKE_PARAMS: "-DVTR_ASSERT_LEVEL=3 -DWITH_BLIFEXPLORER=on -DVTR_ENABLE_STRICT_COMPILE=on -DVTR_IPO_BUILD=off"
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        ./.github/scripts/build.sh


  YOSYSODINII:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        include: [
          {
            name: 'Yosys+ODIN-II Basic',
            suite: 'odin_tech_basic'
          }
        ]
    name: '${{ matrix.name }}'
    steps:

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - uses: actions/checkout@v2
    - run: ./.github/scripts/install_dependencies.sh

    - uses: hendrikmuhs/ccache-action@v1

    - name: Test
      env:
        CMAKE_PARAMS: '-DVTR_ASSERT_LEVEL=3 -DVTR_ENABLE_SANITIZE=on -DVTR_IPO_BUILD=off -DWITH_BLIFEXPLORER=on -DODIN_USE_YOSYS=ON'
        BUILD_TYPE: debug
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        ./.github/scripts/build.sh
        ./run_reg_test.py ${{ matrix.suite }} -show_failures -j2

