#####################
# Aaron Graham (aaron.graham@unb.ca, aarongraham9@gmail.com),
#  Jean-Philippe Legault (jlegault@unb.ca, jeanphilippe.legault@gmail.com),
#   Alexandrea Demmings (alexandrea.demmings@unb.ca, lxdemmings@gmail.com) and
#    Dr. Kenneth B. Kent (ken@unb.ca)
#    for the Reconfigurable Computing Research Lab at the
#     Univerity of New Brunswick in Fredericton, New Brunswick, Canada
#####################

# truth test
simple_true,        is_true, 1'b1, 1'b1
simple_fail,        is_true, 1'b0, 1'b0
decimal_true,       is_true, 1, 1'b1
decimal_fail,       is_true, 0, 1'b0
complex_true,       is_true, 3'b1xz, 1'b1
complex_fail,       is_true, 3'b0xz, 1'b0
unknown_x,          is_true, 1'bx, 1'b0
unknown_z,          is_true, 1'bz, 1'b0
large_number_pass,  is_true, 128'h8000_0000_0000_0000, 1'b1

# type test
simple_x_pass,      is_x,   1'bx,    1'b1
simple_x_fail,      is_x,   1'b1,    1'b0
complex_x_pass,     is_x,   4'bxxxx, 1'b1
complex_x_fail,     is_x,   4'bzxxx, 1'b0
simple_z_pass,      is_z,   1'bz,    1'b1
simple_z_fail,      is_z,   1'b1,    1'b0
complex_z_pass,     is_z,   4'bzzzz, 1'b1
complex_z_fail,     is_z,   4'bxzzz, 1'b0
simple_unk_x_pass,  is_unk, 2'bx1,   1'b1
simple_unk_z_pass,  is_unk, 2'bz1,   1'b1
simple_unk_fail,    is_unk, 2'b10,   1'b0

# sign test
simple_is_unsigned_pass,     is_unsigned,    2'b11,  1'b1
simple_is_unsigned_fail,     is_unsigned,    2'sb11, 1'b0
simple_is_signed_pass,       is_signed,      2'b11,  1'b0
simple_is_signed_fail,       is_signed,      2'sb11, 1'b1

# type conversion test
simple_is_unsigned_1,        to_unsigned,    2'b11,  2'b11
simple_is_unsigned_2,        to_unsigned,    2'sb11, 2'b11
simple_is_signed_1,          to_signed,      2'b11,  2'sb11
simple_is_signed_2,          to_signed,      2'sb11, 2'sb11

# string display
simple_string_b,          display, b, 64'd18446744073709551615, 1111111111111111111111111111111111111111111111111111111111111111
simple_string_B,          display, B, 65'd18446744073709551616, 10000000000000000000000000000000000000000000000000000000000000000
simple_string_u,          display, u, 1'bz, 1'b0        # todo, figure out the real result for this
simple_string_U,          display, U, 1'bx, 1'b0        # todo, figure out the real result for this
simple_string_z,          display, z, 1'bz, z
simple_string_Z,          display, Z, 1'bx, X
simple_string_s,          display, s, "hello world", hello world
simple_string_S,          display, S, "hello world", hello world
simple_string_o,          display, o, 64'd18446744073709551615, 1777777777777777777777
simple_string_O,          display, O, 65'd18446744073709551616, 2000000000000000000000
simple_string_h,          display, h, 64'd18446744073709551615, ffffffffffffffff
simple_string_H,          display, H, 64'd18446744073709551614, FFFFFFFFFFFFFFFE
simple_string_d,          display, d, 265663, 265663
simple_string_D,          display, D, 265663, 265663
simple_string_c,          display, c, "hello world", h
simple_string_C,          display, C, "world", w

# string test
simple_string,          display,        s,   "hello world", hello world
string_compare_pass,    "hello world",  ==,  "hello world", 1'b1
string_compare_fail,    "hello world",  ==,  "hello", 1'b0
string_ne_pass,         "hello world",  !=,  "hello", 1'b1
string_ne_fail,         "hello world",  !=,  "hello world", 1'b0
string_add,             "a",            +,    1,      "b"
string_add_empty,       "b",             +,    "",    "b"

# replicate test
simple_replicate,       {, 3, {, 2'b10, }, }, 6'b101010

# concat test
simple_concat,          {, 2'b01, \, , 2'b10, }, 4'b0110

# base conversions
Decimal-To-Binary,      10,         ==, 4'b1010,    1'b1
Binary-To-Decimal,      4'b1100,    ==, 12,         1'b1
Decimal-To-Hex,         10,         ==, 'hA,        1'b1
Hex-To-Decimal,         'hBF,       ==, 191,        1'b1
Decimal-To-Octal,       10,         ==, 'o12,       1'b1
Octal-To-Decimal,       'o37,       ==, 31,         1'b1

# Sign modifier
Sign_minus,		        -,  10'b1010101010,	'b0101010110
Sign_plus,			    +,  4'b1010,	    'b1010

# Simple Base 10 conversion
simple_decimal_conversion,			+,  6,	6
simple_decimal_minus,			    6, -, 1, 5
simple_decimal_plus,			    6, +, 1, 7
simple_decimal_shift_right,			6,  >>>, 1, 3
simple_decimal_shift_left,			6,  <<<, 1, 12

#################
# tristate

# single bit trigger
# ======

# bufif0
bufif0_on,                 bufif0, 4'b10xz, 1'b0, 4'b10xx
bufif0_off,                bufif0, 4'b10xz, 1'b1, 4'bzzzz
bufif0_dc,                 bufif0, 4'b10xz, 1'bx, 4'bxxxx
bufif0_hihz,               bufif0, 4'b10xz, 1'bz, 4'bxxxx

# bufif1
bufif1_on,                 bufif1, 4'b10xz, 1'b1, 4'b10xx
bufif1_off,                bufif1, 4'b10xz, 1'b0, 4'bzzzz
bufif1_dc,                 bufif1, 4'b10xz, 1'bx, 4'bxxxx
bufif1_hihz,               bufif1, 4'b10xz, 1'bz, 4'bxxxx

# notif0
notif0_on,                 notif0, 4'b10xz, 1'b0, 4'b01xx
notif0_off,                notif0, 4'b10xz, 1'b1, 4'bzzzz
notif0_dc,                 notif0, 4'b10xz, 1'bx, 4'bxxxx
notif0_hihz,               notif0, 4'b10xz, 1'bz, 4'bxxxx

# notif1
notif1_on,                 notif1, 4'b10xz, 1'b1, 4'b01xx
notif1_off,                notif1, 4'b10xz, 1'b0, 4'bzzzz
notif1_dc,                 notif1, 4'b10xz, 1'bx, 4'bxxxx
notif1_hihz,               notif1, 4'b10xz, 1'bz, 4'bxxxx

# wide trigger
# ======

# bufif0
bufif0_upper,              bufif0, 4'b10xz, 4'b1100, 4'bzzxx
bufif0_lower,              bufif0, 4'b10xz, 4'b0011, 4'b10zz

# bufif1
bufif1_upper,              bufif1, 4'b10xz, 4'b1100, 4'b10zz
bufif1_lower,              bufif1, 4'b10xz, 4'b0011, 4'bzzxx

# notif0
notif0_upper,              notif0, 4'b10xz, 4'b1100, 4'bzzxx
notif0_lower,              notif0, 4'b10xz, 4'b0011, 4'b01zz

# notif1
notif1_upper,              notif1, 4'b10xz, 4'b1100, 4'b01zz
notif1_lower,              notif1, 4'b10xz, 4'b0011, 4'bzzxx


# Reduction
Reduction-and,			&,  4'b1010,	1'b0
Reduction-or,			|,  4'b1010,	1'b1
Reduction-xor,			^,  4'b1010,	1'b0
Reduction-nand,			~&,	4'b1010,	1'b1
Reduction-nor,			~|,	4'b1010,	1'b0
Reduction-xnor,			~^,	4'b1010,	1'b1

# Reduction unknowns
Reduction-and-XZ,		&,  4'b10xz,	1'b0
Reduction-or-XZ,		|,  4'b10xz,	1'b1
Reduction-xor-XZ,		^,  4'b10xz,	1'bx
Reduction-nand-XZ,		~&,	4'b10xz,	1'b1
Reduction-nor-XZ,		~|,	4'b10xz,	1'b0
Reduction-xnor-XZ,		~^,	4'b10xz,	1'bx

# bitwise
Bitwise-Not,	            ~,  4'b1010,	'b0101
Bitwise-And,	4'b1010,	&,  4'b1000,	'b1000
Bitwise-Or,		5'b1010,	|,  5'b1000,	'b1010
Bitwise-Nor,	5'b1010,	~|, 5'b1000,	5'b10101
Bitwise-Nand,   5'b1010,	~&, 5'b1000,	5'b10111
Bitwise-Xnor,   5'b1010,	~^, 5'b1000,	5'b11101
Bitwise-Xor,	5'b1010,	^,  5'b1000,	2'b10

# bitwise unknowns
Bitwise-Not-XZ,	                    ~,  4'b10xz,        4'b01xx
Bitwise-And-XZ,	    8'bxxxxzzzz,    &,  8'b10xz10xz,    8'bx0xxx0xx
Bitwise-Or-XZ,	    8'bxxxxzzzz,    |,  8'b10xz10xz,    8'b1xxx1xxx
Bitwise-Nor-XZ,	    8'bxxxxzzzz,    ~|, 8'b10xz10xz,    8'b0xxx0xxx
Bitwise-Nand-XZ,    8'bxxxxzzzz,    ~&, 8'b10xz10xz,    8'bx1xxx1xx
Bitwise-Xnor-XZ,    8'bxxxxzzzz,    ~^, 8'b10xz10xz,    8'bxxxxxxxx
Bitwise-Xor-XZ,	    8'bxxxxzzzz,    ^,  8'b10xz10xz,    8'bxxxxxxxx

# case equivalence
Case-eq,		5'b1xz10,	===,  5'b1xz10,	1'b1
Case-ne,		5'b1xz11,	!==,  5'b1xz10,	1'b1
Case-ne-XZ,		5'b1xz10,	!==,  5'b1zx10,	1'b1
Case-ne,		5'b1xz10,	!==,  5'b1xz10,	1'b0
Case-eq,		5'b1xz11,	===,  5'b1xz10,	1'b0
Case-eq-XZ,		5'b1xz10,	===,  5'b1zx10,	1'b0

# logical operation
Logical-Not,	                    !,  4'b1010,	1'b0
Logical-Not-XZ,	                    !,  4'b1x1z,	1'bx
Logical-And,			4'b1010,	&&, 4'b1000,	1'b1
Logical-And-XZ,			4'b1x1z,	&&, 4'b1000,	1'bx
Logical-Or,				4'b1010,	||, 4'b1000,	1'b1
Logical-Or,				4'b0000,	||, 4'b1000,	1'b1
Logical-Or,				4'b0000,	||, 4'b0000,	1'b0
Logical-Or,				4'b0zx0,	||, 4'b0000,	1'bx
Logical-less,           4'b0000,    <,  4'b0000,    1'b0	
Logical-less-1,			4'b0000,	<,	4'b0001,	1'b1
Logical-less-2,         4'b0001,    <,  4'b0000,    1'b0
Logical-less-3,         4'bxxxx,    <,  4'b0001,    1'bx
Logical-less-4,         4'b0001,    <,  4'bxxxx,    1'bx
Logical-less-5,         4'b0xxx,    <,  4'b1001,    1'bx
Logical-less-6,         4'b1001,    <,  4'b0xxx,    1'bx
Logical-less-7,         4'sb1001,   <,  4'sb0xxx,   1'bx
Logical-less-8,         4'sb0xxx,   <,  4'sb1001,   1'bx
Logical-less-9,         4'b0zzz,    <,  4'b1001,    1'bx
Logical-less-10,         4'sb0zzz,   <,  4'sb1001,   1'bx
Logical-greater,        4'b0000,    >,  4'b0000,    1'b0
Logical-greater-1,		4'b0000,	>,	4'b0001,	1'b0
Logical-greater-2,      4'b0001,    >,  4'b0000,    1'b1
Logical-greater-3,      4'bxxxx,    >,  4'b0001,    1'bx
Logical-greater-4,      4'b0001,    >,  4'bxxxx,    1'bx
Logical-greater-5,      4'b0xxx,    >,  4'b1001,    1'bx
Logical-greater-6,      4'b1001,    >,  4'b0xxx,    1'bx
Logical-greater-7,      4'sb1001,   >,  4'sb0xxx,   1'bx
Logical-greater-8,      4'sb0xxx,   >,  4'sb1001,   1'bx
Logical-gr-equal,	    4'b0000,	>=, 4'b0000,	1'b1
Logical-gr-equal-1,		4'b0000,	>=,	4'b0001,	1'b0
Logical-gr-equal-2,     4'b0001,    >=, 4'b0000,    1'b1
Logical-gr-equal-3,     4'bxxxx,    >=, 4'b0001,    1'bx
Logical-gr-equal-4,     4'b0001,    >=, 4'bxxxx,    1'bx
Logical-gr-equal-5,     4'b0001,    >=, 4'bzzzz,    1'bx
Logical-less-equal,		4'b0000,	<=, 4'b0000,	1'b1
Logical-less-equal-1,	4'b0000,	<=,	4'b0001,	1'b1
Logical-less-equal-2,   4'b0001,    <=, 4'b0000,    1'b0
Logical-less-equal-3,   4'bxxxx,    <=, 4'b0001,    1'bx
Logical-less-equal-4,   4'b0001,    <=, 4'bxxxx,    1'bx	
Logical-less-equal-5,   4'b0001,    <=, 4'bzzzz,    1'bx	
Logical-equal,			4'b0000,	==, 4'b0000,	1'b1
Logical-equal-1,		4'b0000,	==,	4'b0001,	1'b0
Logical-equal-2,        4'b0001,    ==, 4'b0000,    1'b0
Logical-equal-3,        4'bxxxx,    ==, 4'b0001,    1'bx
Logical-equal-4,        4'b0001,    ==, 4'bxxxx,    1'bx
Logical-equal-5,        4'b0001,    ==, 4'bzzzz,    1'bx
Logical-bits,			'b1110,	    ==, 4'b1110,	1'b1	
Logical-not-equal,		4'b0000,	!=,	4'b0000,	1'b0
Logical-not-equal-1,	4'b0000,	!=,	4'b0001,	1'b1
Logical-not-equal-2,    4'b0001,    !=, 4'b0000,    1'b1
Logical-not-equal-3,    4'bxxxx,    !=, 4'b0001,    1'bx
Logical-not-equal-4,    4'b0001,    !=, 4'bxxxx,    1'bx
Logical-not-equal-5,    4'b0001,    !=, 4'bzzzz,    1'bx

# Tests for correct sign extension
Sign-Extend,                    4'b0001,    ===,    1'b1,   1'b1
Sign-Extend-Unknown,            4'b00xz,    ===,    2'bxz,  1'b1
Sign-Extend-Sign,               4'sb1111,   ===,    1'sb1,  1'b1
Sign-Extend-Sign-Unknown,       4'sbxxxz,   ===,    2'sbxz,  1'b1

# shift operation
Shift-left,				        6'b0001zx,	<<,	    2'b10,	6'b01zx00
Shift-right, 			        6'b0zx100,	>>,		2'b10,	3'bzx1
Signed-shift-left,		        5'b001zx,	<<<,	2'b10,	5'b1zx00
Unsigned-Signed-shift-right,	6'b1z1x00,	>>>,	2'b10,	6'b001z1x
Unsigned-arithmetic-shift-right,6'b1z1x00,	>>>,	2'b10,	6'b001z1x
Signed-arithmetic-shift-right,  6'sb1z1x00,	>>>,	2'b10,	6'sb111z1x
Shift-left-X,                   6'b1010,	<<,	1'bx,	'bx
Shift-left-Z,                   6'b1010,	<<,	1'bz,	'bx
Shift-right-X,                  6'b1010,	>>,	1'bx,	'bx
Shift-right-Z,                  6'b1010,	>>,	1'bz,	'bx

# arithmetic
Addition,			        4'b0110,    +,  4'b0011,    'b1001
Addition-Base-10,			2,          +,  2,          4
Subtraction,		        4'b0100,    -,  4'b0010,    'b10
Subtraction-Base-10,        4,          -,  2,          2
Subtraction-Smaller-Larger, 4'b0010,    -,  4'b0100,    4'b1110
Subtraction-Small-Base-10,  2,          -,  4,          3'sb110
Division,			        4'b1010,    /,  4'b0010,    'b101
Division-Base-10,           10,         /,  5,          2
Division-Neg,               4'sb1010,   /,  3'sb010,    3'sb101
Multiplication,	            4'b0010,    *,  4'b0010,    'b100
Multiplication-Base-10,     2,          *,  3,          6
Multiplication-Neg,         4,          *,  4'sb1100,   7'sb1110000
Modulo,			            4'b1011,    %,  4'b0010,    'b1
Modulo-Base-10,             13,         %,  5,          3
Modulo-Neg,                 4'sb1011,   %,  4'sb0010,   2'sb11
Power,                      2'b10,      **, 2'b10,      4'b0100
Power-Base-10,              2,          **, 3,          8
Power-Zero,                 4'b0010,    **, 4'b0000,    'b1
Power-Zero-Base-10,         3,          **, 0,          1
Power-Unknown,              4'b0000,    **, 4'sb1110,   'bx
Power-Neg-Even,             4'sb1111,   **, 2'b10,      'b1
Power-Neg-Odd,              4'sb1111,   **, 3'b011,     2'sb11

# Ternary operations
Ternary,			1'b1,   ?,  2'b01,  :,  2'b10,  2'b01

# Test Cases As-Per Verilog 2005 Specification: 
# Page 46 "Table 5-8 Examples of modulus and power operators"
V2005-1,                    10,         %,  3,       1          # 10/3 yields a remainder of 1.
V2005-2,                    11,         %,  3,       2          # 11/3 yields a remainder of 2.
V2005-3,                    12,         %,  3,       0          # 12/3 yields no remainder.
V2005-4,                    5'sb10110,  %,  3'sb011, 2'sb11     # The result takes the sign of the first operand.
V2005-5,                    11,         %,  3'sb101, 2          # The result takes the sign of the first operand
#V2005-6,                    5'sb10100, %,  3,       1          # -4'd12 is seen as a large positive number that leaves a remainder of 1 when divided by 3.
V2005-7,                    3,          **, 2,       9          # 3 * 3
V2005-8,                    2,          **, 3,       8          # 2 * 2 * 2
V2005-9,                    2,          **, 0,       1          # Anything to the zero exponent is 1.
V2005-10,                   0,          **, 0,       1          # Zero to the zero exponent is also 1.
V2005-11,                   2,          **, 3'sb111, 0          # 2 ** -1 = 1/2. Integer division truncates to zero.
V2005-12,                   0,          **, 2'sb11,  'bx     # 0 ** -1 = 1/0. Integer division by zero is 'bx.

#2.0 ** -3'sb1 0.5 2.0 is real, giving real reciprocal.
#9 ** 0.5 3.0 Real square root.
#9.0 ** (1/2) 1.0 Integer division truncates exponent to zero.
#-3.0 ** 2.0 9.0 Defined because real 2.0 is still integral value


